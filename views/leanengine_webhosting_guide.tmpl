
(Translation in progress)


{% set var_app_domain = '{Used Domain}' %}
{% import "views/_helper.njk" as docs %}

{% raw %}<script>$(window).load(function() {$('.do-expand-all').click();})</script>{% endraw %}
# Web Hosting Development Guide &middot; {{platformName}}


Web hosting is a sub-module of the cloud engine; it allows you to develop a web application with {{platformName}}. 
It provides cloud functions and Hook, hosting for static files and customized routing, and it can also bind your own domain name to the application. 
You can use it to create an introduction and download page for your mobile applications, developing an administrator console or a complete website, or running some custom logic that are mandatory to run on the server side.



If you don't know how to create a cloud engine project, debug it locally and deploy it to the cloud, you can firstly read [Cloud Engine Quick Start] (leanengine_quickstart.html). Other related documents include:
 
 - [Cloud Engine Service Overview] (leanengine_overview.html) (Overview of all features)
 - [Command Line Tool Usage Guide] (leanengine_cli.html)
 - [LeanCache Usage Guide] (leancache_guide.html) (using the in-memory cache service to improve performance)
 - [Cloud Engine Project Example] (leanengine_examples.html)
 - [Cloud Engine FAQs] (leanengine_faq.html)

This document uses {{platformName}} as an example, but the cloud engine supports many other languages. 
You can choose the technology stack you are familiar with for development:


- [Node.js](leanengine_webhosting_guide-node.html)
- [Python](leanengine_webhosting_guide-python.html)
- [PHP](leanengine_webhosting_guide-php.html)
- [Java](leanengine_webhosting_guide-java.html)
- [.NET](leanengine_webhosting_guide-dotnet.html)


## Starting with the example project

{% block getting_started %}{% endblock %}

### 本地运行和调试

在确保所有的依赖都正确安装之后，在项目根目录，用我们的命令行工具来启动本地调试了：
After ensuring that all dependencies are properly installed, in the project root directory, you can use our command line tool to start debugging locally:


```sh
lean up
```

更多有关命令行工具和本地调试的内容请看 [命令行工具使用指南](leanengine_cli.html)。
More content about the command line tool and local debugging, please refer to the [Command Line Tool Usage Guide](leanengine_cli.html).

### Deploy to the cloud


Run in your project root directory:

```sh
lean deploy
```

###  Setting up the domain name

你可以在 [云引擎 > 设置](/cloud.html?appid={{appid}}#/conf) 的「Web 主机域名」部分，填写一个自定义的二级域名，例如你设置了 `myapp`，那么你就可以通过我们的二级域名来访问你的网站了：

 In the "Web Hosting Domain Name" section of [Cloud Engine > Settings] (/cloud.html?appid={{appid}}#/conf), you can fill in a custom second-level domain name. For example, you set `myapp` , then you can access your website through our second-level domain name:
- `http://myapp.leanapp.cn`（Chinese Area）
- `http://myapp.avosapps.us`（US Area）

<div class="callout callout-info">DNS You may need to wait a few hours till it takes into effect</div>


Our second-level domain is by default supported by HTTPS.


If your app has no visit within 30 days and does not purchase a standard instance, the second-level domain may be recycled.

{% block runtime_description %}{% endblock %}

{% block project_constraint %}{% endblock %}

{% block custom_runtime %}{% endblock %}

{% block project_start %}{% endblock %}

{% block supported_frameworks%}{% endblock %}

{% block use_leanstorage %}{% endblock %}

## Health monitoring

When your application is starting, the cloud engine's hypervisor will check if your application is started successfully every second. If it is still not started successfully after **30 seconds**, it means that the startup fails. After the application starts running normally, there will also be regular “health monitoring” to ensure your app is running properly.  And if health monitoring fails, the cloud engine hypervisor will automatically restart your app.


The URL for the health monitoring includes homepage of your application(`/`) and {{platformName}}SDK  which is responsible for `/__engine/1/ping` . As long as  **one of the two** returns a response of HTTP 200, you can considered it as a success. So make sure your program uses the {{platformName}} SDK, or your app ** home page will return an HTTP 200** response normally.
In addition, in order to support the cloud function and Hook function of the cloud engine, the hypervisor will use the URL of `/1.1/functions/_ops/metadatas` to interact with the {{platformName}} SDK. Please ensure that this URL is given to {{ The platformName}} SDK to handle, or ** returns an HTTP 404 indicating that the function will not use the cloud function** or Hook related functions.

{% block ping %}	
关于如何加载 {{platformName}} SDK，见前一小节 [使用数据存储服务](#使用数据存储服务)
About how to load {{platformName}} SDK, please refer to the previous section [Using Data Storage Service] (#Using Data Storage Service)

{% endblock %}

{% block generalFeature %}

## 用户状态管理 User Status management



{% block cookie_session %}{% endblock %}

## 实现常见的网站功能 Website common function realisation

### 发送 HTTP 请求 Sending HTTP request

{% block http_client %}{% endblock %}

### 获取客户端 IP Obtain Client-end IP

如果你想获取客户端的 IP，可以直接从用户请求的 HTTP 头的 `x-real-ip` 字段获取，示例代码如下：
If you want to get the client's IP, you can get it directly from the `x-real-ip` field of the HTTP header requested by the user. 
The sample code is as follows:

{% block code_get_client_ip_address %}{% endblock %}

### 文件上传 Upload Files
托管在 {{productName}} 的网站项目可以直接使用内置的 LeanCloud {{sdk_name}} SDK 的 API 文件相关的接口直接处理文件的上传。
Website projects that are hosted on {{productName}} can directly handle file uploads directly using the API file-related interfaces of the built-in LeanCloud {{sdk_name}} SDK. 


假设前端 HTML 代码如下：
Assume the front-end HTML code written like this:

```html
<form enctype="multipart/form-data" method="post" action="/upload">
  <input type="file" name="iconImage">
  <input type="submit" name="submit" value="submit">
</form>
```

{% block upload_file_special_middleware %}{% endblock %}

接下来定义文件上传的处理函数，构建一个 Form 对象，并将 req 作为参数进行解析，会将请求中的文件保存到临时文件目录，并构造 files 对象：
Next, define the handler function for the file uploading, build a Form object, parse req as a parameter, it will save the requested files to the temporary file directory, and construct the files object:

{% block code_upload_file_sdk_function %}{% endblock %}

### Session
{% block custom_session %}
{{platformName}} 暂不支持。Not supported yet
{% endblock %}

### CSRF Token
如果你的云引擎应用使用 Cookie 作为鉴权方式的话（例如使用 SDK 的 CookieSession 中间件），那就有受到 [CSRF](https://github.com/pillarjs/understanding-csrf) 攻击的风险，将会允许其他站点伪造带有正确 Cookie 的恶意请求。
If your cloud engine application uses cookies as an authentication method (for example, using the SDK's CookieSession middleware); then there is a risk of being attacked by [CSRF](https://github.com/pillarjs/understanding-csrf). It will allow other sites to forge malicious requests with the correct cookies.


业界通常使用 CSRF Token 来防御 CSRF 统计，你需要传递给客户端一个随机字符串（即 CSRF Token，可通过 Cookie 传递），客户端在每个有副作用的请求中都要将 CSRF 包含在请求正文或 Header 中，服务器端需要校验这个 CSRF Token 是否正确。
The industry usually uses CSRF Token to defend against CSRF statistics. You need to pass a random string (that is, CSRF Token, which can be passed through the cookie) to the client-end. The client-end must include CSRF in the request body or in the header. The server needs to verify that the CSRF Token is correct. 

{% block csrf_token %}{% endblock %}

{% endblock %}

### LeanCache

{% block leancache %}{% endblock %}

关于 LeanCache 的更多使用方法请看 [LeanCache 使用指南](leancache_guide.html)。
For more instruction on how to use LeanCache, see the [LeanCache Usage Guide] (leancache_guide.html).

### 重定向到 HTTPS Redirect to HTTP


为了安全性，我们可能会为网站加上 HTTPS 加密传输。我们的 {{productName}} 支持网站托管，同样会有这样的需求。
For security consideration, we may add HTTPS encrypted transmissions to the websites. Our {{productName}} supports web hosting and it also has such a requirement.

因此我们在 {{productName}} 中提供了一个新的 middleware 来强制让你的 `{{var_app_domain}}.leanapp.cn` 的网站通过 https 访问，你只要这样：
For this reason,  we provide a new middleware in {{productName}} to force your website `{{var_app_domain}}.leanapp.cn` to be accessed via https, you just have to do this:

{% block https_redirect %}{% endblock %}

部署并发布到生产环境之后，访问你的 {{productName}} 网站二级域名都会强制通过 HTTPS 访问。

After deploying and publishing to the production environment, accessing your {{productName}} site's second-level domain will be forced to access via HTTPS.


{% block extra_examples %}{% endblock %}

## 部署与发布 Deploy and publish


### 命令行部署 Command line deploy

在你的项目根目录运行： Run in you project root directory:

```sh
lean deploy
```

使用命令行工具可以非常方便地部署、发布应用，查看应用状态，查看日志，甚至支持多应用部署。具体使用请参考 [命令行工具指南](leanengine_cli.html)。

Using command line tools makes it easy to deploy, publish, view application status, view logs, and even support multiple application deployments. Please refer to the [Command Line Tool Guide] (leanengine_cli.html) for specific usage.
### 依赖缓存 Dependent cache


云引擎实现了一个缓存机制来加快构建的速度，所谓构建就是指你的应用在云引擎上安装依赖的过程，在每次构建时，如果依赖没有新增或者删减，那么就直接使用上次安装的依赖，只将新的应用代码替换上去。

The cloud engine implements a caching mechanism to speed up the construction process. The so-called construction means the process of installing dependencies on your cloud engine. Each time you construct, if the dependencies are not being added or deleted, then you can use the last dependencies. You only need to replace the new application code.
{% block depentencyCache %}{% endblock %}

如果你遇到了与依赖安装有关的问题，可以在控制台部署时勾选「下载最新依赖」，或通过命令行工具部署时添加 `--no-cache` 选项；依赖缓存也会因为很多原因失效，因此也不保证每次构建都可以利用上缓存。

If you are encountering problems with installing dependencies, you can checkmark the "Download latest dependencies" option during console deployment, or add the `--no-cache` option when deploying via command line tools; dependency caching will also fail for a number of reasons. Therefore, there is no guarantee that the cache can be utilized for each construction.
```sh
lean deploy --no-cache
```

### Git 部署 Deploy 

除此之外，还可以使用 git 仓库部署。你需要将项目提交到一个 git 仓库，我们并不提供源码的版本管理功能，而是借助于 git 这个优秀的分布式版本管理工具。我们推荐你使用 [GitHub](https://github.com/)、[Coding](https://coding.net/) 或者 [码云](https://gitee.com/) 这样第三方的源码托管网站，也可以使用你自己搭建的 git 仓库（比如 [Gitlab](http://gitlab.org/)）。
In addition to this, you can also use git repository deployment. You need to submit the project to a git repository. We don't provide the source version management function, but instead, we use git- an excellent distributed version management tool. We recommend that you use  third parties source code hosting website like [GitHub] (https://github.com/), [Coding](https://coding.net/) or [code cloud] (https://gitee.com/). Or you can also use your own git repository (such as [Gitlab] (http://gitlab.org/))

你需要先在这些平台上创建一个项目（如果已有代码，请不需要选择「Initialize this repository with a README」），在网站的个人设置中填写本地机器的 SSH 公钥（以 GitHub 为例，在 Settings => SSH and GPG keys 中点击 New SSH key），然后在项目目录执行：
You need to create a project on these platforms first (if you already have the code, please do not select "Initialize this repository with a README"), fill in the local machine's SSH public key in the personal settings of the website (take GitHub as an example, Settings => SSH and GPG keys click New SSH key), then execute in the project directory:

```sh
git remote add origin git@github.com:<username>/<repoName>.git
git push -u origin master
```

然后到云引擎的设置界面填写你的 Git 仓库地址，如果是公开仓库建议填写 https 地址，例如 `https://github.com/<username>/<repoName>.git`。
Then fill in the Git repository address in the cloud engine settings interface. If it is a public repository, it is recommended to fill in the https address, such as `https://github.com/<username>/<repoName>.git`. 

如果是私有仓库需要填写 ssh 地址 `git@github.com:<username>/<repoName>.git`，还需要你将云引擎分配给你的公钥填写到第三方托管平台的 Deploy keys 中，以 GitHub 为例，在项目的 Settings => Deploy keys 中点击 Add deploy key。
If it is a private repository, you need to fill in the ssh address `git@github.com:<username>/<repoName>.git`, you also need to public key which was assigned to your cloud engine to the Deploy keys of the third-party hosting platform. Take GitHub for example, click Add deploy key in the project's Settings => Deploy keys.

设置好之后，今后需要部署代码时就可以在云引擎的部署界面直接点击「部署」了，默认会部署 master 分支的代码，你也可以在部署时填写分支、标签或具体的 Commit。
After the set up, if you need the deloy code in the future, you can directly click “Deploy” in the deployment interface of the cloud engine. 
By default, it will deploy the code of the master branch. You can also fill in the branch ,label or specific Commit during deployment.

### 预备环境和生产环境 Preparatory environment and production environment
默认情况，云引擎只有一个「生产环境」，对应的域名是 `{{var_app_domain}}.leanapp.cn`。在生产环境中有一个「体验实例」来运行应用。
By default, the cloud engine only has one "production environment" and the corresponding domain name is `{{var_app_domain}}.leanapp.cn`. There is an "experience example" in the production environment to run the application.


当生产环境的体验实例升级到「标准实例」后会有一个额外的「预备环境」，对应域名 `stg-{{var_app_domain}}.leanapp.cn`，两个环境所访问的都是同样的数据，你可以用预备环境测试你的云引擎代码，每次修改先部署到预备环境，测试通过后再发布到生产环境；如果你希望有一个独立数据源的测试环境，建议单独创建一个应用。
When the experience example of the production environment is upgraded to "Standard example", there will be an additional "preparation environment" with corresponding domain name `stg-{{var_app_domain}}.leanapp.cn`, both environments access the same data. You can test your cloud engine code with the prepared environment. Each time you modify it, you can deploy it to the prepared environment first. After the test is passed, you can publish it to the production environment. If you want to have a test environment with an independent data source, it is recommended to create an application separately.


<div class="callout callout-info">如果访问云引擎遇到「Application not Found」的错误，通常是因为对应的环境还没有部署代码。例如应用可能没有预备环境，或应用尚未发布代码到生产环境。</div>
<div class="callout callout-info"> If you encounter an "Application not Found" error when access the cloud engine, it is usually because the corresponding environment has not yet being deployed the code. For example, an application may not have a preparation environment, or the application has not yet released code to the production environment. </div>


有些时候你可能需要知道当前云引擎运行在什么环境（开发环境、预备环境或生产环境），从而做不同的处理：
Sometimes you may need to know what environment the current cloud engine is running in (development, pre- or production) and then do different operations:

{% block get_env %}{% endblock %}

客户端 SDK 都有类似于 `setProduction` 的方法，比如 [JavaScript SDK API 的 AV.setProduction(production)](leanengine_cloudfunction_guide-node.html#hash1210911107)，其中 `production` 设置为 `0` 则该 SDK 将请求预备环境；设置为 `1` 将请求生产环境，默认为 `1`。
Client-end sdk has methods similiar to `setProduction` , for example [AV.setProduction(production) of JavaScript SDK API](leanengine_cloudfunction_guide-node.html#hash1210911107). If the `production` here is set to `0` ,then the SDK will request a preparation environment; if set to `1` , it will request the production environment. The default setting is `1`.

## 云端环境 Cloud environment

### 系统级依赖 System level dependency

System-level dependencies refer to some common functional modules on the operating system during an operating process, such as [ffmpeg](https://www.ffmpeg.org/). If you need to use the current project, just add The system dependencies section  in the `leanengine.yaml` file, you can specify the required system dependencies, similar to:

```yaml
systemDependencies:
  - imagemagick
```

Currently supported options include:

- `ffmpeg`An audio and video processing tool library
- `imagemagick` An image processing tool library
- `fonts-wqy`  Wenquanyi Bitmap song, Wenquanyi Micro black, usually cooperate with phantomjs to display Chinese character.
- `phantomjs` A Webkit Browser without UI.

Note ** System-level dependent Function modules will not add by default**, adding system dependencies will slow down the deployment, so please don't add unused dependencies.


###  Environmental variable

云引擎平台默认提供下列环境变量供应用使用：
The cloud engine platform provides the following environment variables by default:

Variable name|explanation
---|---
`LEANCLOUD_APP_ID`| Current used APP ID
`LEANCLOUD_APP_KEY`| Current used APP key
`LEANCLOUD_APP_MASTER_KEY`|Current used Master Key
`LEANCLOUD_APP_ENV`| Current application environemnt <ul><li>The development environment does not have this environment variable, or the value of `development` (generally referred to as local development)</li> </li><li>Preparation environment value is `stage`</li><li>Production environment value is `production`</li></ul>
`LEANCLOUD_APP_PORT`|The port that the current application is open to the external network, only by listening this port can the user access you service.
`LEANCLOUD_API_SERVER`| The address used to access the storage service (similar to `https://api.leancloud.cn`). This value can vary depending on reasons like your data center, etc.. So use this value of this environment variable when requesting storage services or LeanCloud other services using the REST API. In the cloud engine ** Do not use `https://api.leancloud.cn` directly
`LEANCLOUD_AVAILABLE_CPUS`|The number of CPUs available for the cloud engine instance, this value is greater than 1 for high-spec instances (e.g. 2CPU 1024MB memory). The application can start a corresponding number of threads or processes based on this value. In the cloud engine ** Do not ** directly use the operating system CPU core, otherwise it may start too many processes and cause the exception to exit because it exceeds the instance specification.
`LEANCLOUD_APP_GROUP`|The group in which the cloud engine instance is located. When using the Cloud Engine [Group Management] (leanengine_plan.html#Group Management) feature, this value is the name of the group.
`LEANCLOUD_REGION`|The area where the cloud engine service is located, the value of {% if node != 'qcloud' %} is `CN` or `US`, which represents domestic node and the US node respectively. {% else %} currently only supports `CN` or Chinese nodes. {% endif %} 

<div class="callout callout-info">Environment variables (such as `LC_APP_ID`) that are used by older cloud engines starting with `LC_` have been abandoned. To ensure code compatibility, the `LC_` variable is still valid for a period of time but may fail completely in the future. To avoid errors, it is recommended to use the `LEANCLOUD_` variable instead. </div> 
You can also add custom environment variables to the [Cloud Engine > Settings > Custom Environment Variables] (/dashboard/cloud.html?appid={{appid}}#/conf) page. The names of the varaibles must be a letter, a number, an underscore, and begin with a letter. The value must be a string. The environment variable will be modified and will take effect the next time it is deployed. 

According to general practice, some configuration items can be stored in environment variables. In this way, the environment variables can be modified and redeployed to change the behavior of the program without modifying the code, or you can store some Secret Key provided by third-party services in the environment variables so that these secret keys won't appear directly in the code. 

{% block code_calling_custom_variables %}{% endblock %}

{% call docs.alertWrap() %}
The environment variable provided by default by the cloud engine{% if platformName | lower == 'node.js' %} (and Node.js environment variable `NODE_ENV`){% endif %} cannot be overwritten by custom environment variables (override) invalid). 

{% endcall %}

### Load balancing

在云引擎上，用户的请求会先经过一个负载均衡组件，再到达你的应用。负载均衡组件会处理 HTTPS 加密、对响应进行压缩等一般性工作，因此你不必在你的应用中添加 HTTPS 或 gzip 相关的功能。
On the cloud engine, the user's request goes through a load balancing component before reaching your app. The load balancing component handles the general work of HTTPS encryption, compression of responses, etc., so you don't have to add HTTPS or gzip-related functionality to your app. 

负载均衡同时限制了请求不能超过 100M（包括直接上传文件到云引擎）、请求处理不得超过 60 秒，WebSocket 60 秒无数据会被断开连接。
Load balancing also limits the request to no more than 100M (including direct upload files to the cloud engine), request processing cannot exceed 60 seconds, WebSocket 60 seconds without data will be disconnected. 

### 文件系统 File System

你可以向 `/home/leanengine` 或 `/tmp` 目录写入临时文件，最多不能超过 1G。
You can write temporary files to the `/home/leanengine` or `/tmp` directory, up to 1G. 

云引擎每次部署都会产生一个新的容器，即使不部署系统偶尔也会进行一些自动调度，这意味着你 **不能将本地文件系统当作持久的存储**，只能用作临时存储。
Each time the cloud engine is deployed will create a new container. Even if it is not deployed. The system occasionally performs some automatic scheduling, which means that **you can't treat the local file system as a persistent storage**, only for temporary use storage.

如果你写入的文件体积较大，建议在使用后自动删除他们，否则如果占用磁盘空间超过 1G，继续写入文件可能会收到类似 `Disk quota exceeded` 的错误，这种情况下你可以重新部署一下，这样文件就会被清空了。
If the files you write in are large, it is recommended to delete them automatically after use. Otherwise, if you take up more than 1G of disk space, you may receive errors similar to `Disk quota exceeded` if you continue to write files in. In this case, you can re- Deploy it so that the file will be emptied. 
### 日志 Log

在控制台的 [云引擎 / 日志](/cloud.html?appid={{appid}}#/log) 中可以查看云引擎的部署和运行日志，还可以通过日志级别进行筛选。
in the [Cloud Engine/Logs] (/cloud.html?appid={{appid}}#/log) of the console, you can view the cloud engine's deployment and running logs , and you can also filter them by the log levels. 

你还可以 [通过命令行工具来导出](leanengine_cli.html#查看日志) 最近七天的日志到本地文件，方便进行进一步的分析和统计。
You can also [export via command line tool] (leanengine_cli.html#View Log) to save the last seven days of logs to local files for further analysis and statistics. 

应用的日志可以直接输出到「标准输出」或者「标准错误」，这些信息会分别对应日志的 `info` 和 `error` 级别，比如下列代码会在 info 级别记录参数信息：
The application log can be directly output to "standard output" or "standard error". The information will correspond to the level of`info` and `error` of the log. For example, the following code will record the parameter information at the info level:
{% block loggerExample %}{% endblock %}

<div class="callout callout-info">日志单行最大 4096 个字符，多余部分会被丢弃；日志输出频率大于 600 行/分钟，多余的部分会被丢弃。</div>
<div class="callout callout-info">The log line has a maximum of 4096 characters, and the extra portion is discarded; the log output frequency is greater than 600 lines/minute, and the extra section will be discarded. </div> 

{% block loggerExtraDescription %}{% endblock %}

云引擎的访问日志（Access Log）可在 [应用控制台 > 云引擎 > 访问日志](/cloud.html?appid={{appid}}#/accesslog) 中导出，通过控制台下载经过打包的日志。
The cloud engine's access log (Access Log) can be exported from [App Console > Cloud Engine > Access Log] (/cloud.html?appid={{appid}}#/accesslog), you can download the packaged logs via the console. 

### 时区 Time zone

在云引擎的中国区系统默认使用北京时间（`Asia/Shanghai`），美国区默认使用 UTC 时间。
In the Chinese area system of the cloud engine's, Beijing time (`Asia/Shanghai`) is used by default. And the US area system uses UTC time by default. 

{% block section_timezone %}{% endblock %}

### 出入口 IP 地址 Gateway IP address

如果开发者希望在第三方服务平台（如微信开放平台）上配置 IP 白名单而需要获取云引擎的入口或出口 IP 地址，请进入 [控制台 > 云引擎 > 设置 > 出入口 IP](/dashboard/cloud.html?appid={{appid}}#/conf) 来自助查询。
If the developer wants to configure the IP whitelist on a third-party service platform (such as WeChat Open Platform) and needs to obtain the cloud engine portal or egress IP address, go to [Control Panel > Cloud Engine > Settings > Portal IP] (/dashboard/ Cloud.html?appid={{appid}}#/conf) to self-check. 

我们会尽可能减少出入口 IP 的变化频率，但 IP 突然变换的可能性仍然存在。因此在遇到与出入口 IP 相关的问题，我们建议先进入控制台来核实一下 IP 列表是否有变化。
We will minimize the frequency of changes in the IP of the gateway as much as possible, but the possibility of a sudden IP change still exists. Therefore, in the case of problems related to the IP of the portal, we recommend entering the console to check if the IP list has changed. 

## 备案和自定义域名 Filing and custom domain names

在前面介绍过的[设置域名](#设置域名)指的是设置一个二级域名，严格来说，**不建议直接用于生产环境**，出于安全考虑和法律法规的规定，网站准备正式运营之前，您应该绑定自己的注册的并已经备案过的域名。
The [Setting Domain Name] (#Setting Domain Name) mentioned earlier refers to setting a second-level domain name. Strictly speaking, ** is not recommended for direct use in the production environment**, for security reasons and laws and regulations, before you are ready to go into business with your website, you should bind your own registered and already filed domain name. 

如果需要绑定自己的域名，进入 [应用控制台 > 账号设置 > 域名绑定](/settings.html#/setting/domainbind)，按照步骤填写资料即可。
If you need to bind your own domain name, go to [App Console > Account Settings > Domain Binding] (/settings.html#/setting/domainbind) and follow the steps to fill in the information.

国内节点绑定独立域名需要有 ICP 备案，美国节点不需要。
The binding of independent domain names to domestic nodes requires ICP filing, whilst US nodes do not. 

如果没有 ICP 备案，请进入 [应用控制台 > 账号设置 > 域名备案](/settings.html#/setting/domainrecord)，按照步骤填写资料进行备案。在主域名已在 LeanCloud 备案的情况下，子域名不需要额外备案；主域名在其他云服务商备案的情况下，如需在 LeanCloud 使用子域名，还需在 LeanCloud 再次备案。
If you have no ICP filing, please go to [App Console > Account Settings > Domain Recording] (/settings.html#/setting/domainrecord) and follow the steps to fill in the information for filing. In the case that the primary domain name has been filed with LeanCloud, the subdomain does not require additional filing; if the primary domain is filed with other cloud providers, if you need to use the subdomain in LeanCloud, you need to file it again in LeanCloud. 

<div class="callout callout-info">备案之前要求云引擎已经部署，并且网站内容和备案申请的内容一致。仅使用云引擎托管静态文件、未使用其他 LeanCloud 服务的企业用户，需要自行完成域名备案工作。</div>
<div class="callout callout-info">Before filing, the cloud engine must be, and the content of the website is consistent with the content of the filing application. Enterprise users who only use the cloud engine to host static files and do not use other LeanCloud services need to complete their own domain name filing. 

